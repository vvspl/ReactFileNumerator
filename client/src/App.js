'use client';

import { useState, useRef } from 'react';
import './App.css';

function App() {
  const [files, setFiles] = useState([]);
  const [numbering, setNumbering] = useState(false);
  const [numberingFormat, setNumberingFormat] = useState('01'); // "01", "001", "1", "A"
  const [selectedDirectory, setSelectedDirectory] = useState('');
  const [directoryHandle, setDirectoryHandle] = useState(null);
  const [movingFileId, setMovingFileId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);
  const directoryInputRef = useRef(null);

  const handleFileSelect = event => {
    const selectedFiles = Array.from(event.target.files);

    // Validate files
    const maxSize = 100 * 1024 * 1024; // 100MB
    const validFiles = [];
    const errors = [];

    selectedFiles.forEach(file => {
      if (file.size > maxSize) {
        errors.push(`${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 100MB)`);
      } else {
        validFiles.push(file);
      }
    });

    if (errors.length > 0) {
      setError(errors.join(', '));
      setTimeout(() => setError(''), 5000);
    }

    const newFiles = validFiles.map((file, index) => ({
      id: Date.now() + index,
      name: file.name,
      size: file.size,
      type: file.type,
      file: file,
      extension: file.name.split('.').pop().toLowerCase(),
    }));

    setFiles(prev => [...prev, ...newFiles]);

    // Reset input
    event.target.value = '';
  };

  const handleDirectoryChange = event => {
    const path = event.target.value.trim();
    setSelectedDirectory(path);
    if (path) {
      setError('');
    }
  };

  const handleDirectorySelect = event => {
    const selectedFiles = event.target.files;
    if (selectedFiles.length > 0) {
      const file = selectedFiles[0];
      // Extract directory path from file path
      const fullPath = file.webkitRelativePath || file.name;
      let directoryPath = '';

      if (file.webkitRelativePath) {
        // If webkitRelativePath exists, extract directory
        const pathParts = file.webkitRelativePath.split('/');
        pathParts.pop(); // Remove filename
        directoryPath = pathParts.join('/');
      } else {
        // For regular file selection, we can't get the full path due to security
        // So we'll use a placeholder and let user edit it
        directoryPath = '–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)';
      }

      setSelectedDirectory(directoryPath);
      setError('');
    }
    // Reset input
    event.target.value = '';
  };

  const handleDirectoryPicker = async () => {
    try {
      // Check if File System Access API is supported
      if ('showDirectoryPicker' in window) {
        const handle = await window.showDirectoryPicker();
        setDirectoryHandle(handle);
        // Try to get a more descriptive path, fallback to name
        const displayPath = handle.name || '–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞';
        setSelectedDirectory(displayPath);
        setError('');
      } else {
        // Fallback: use file input to get directory path
        directoryInputRef.current?.click();
      }
    } catch (error) {
      if (error.name !== 'AbortError') {
        setError(`–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏: ${error.message}`);
      }
    }
  };

  const toggleNumbering = () => {
    setNumbering(!numbering);
  };

  const getFileName = (file, index) => {
    if (!numbering) return file.name;

    let number;
    switch (numberingFormat) {
      case '001':
        number = String(index + 1).padStart(3, '0');
        break;
      case '1':
        number = String(index + 1);
        break;
      case 'A':
        number = String.fromCharCode(65 + (index % 26)); // A, B, C...
        break;
      default: // "01"
        number = String(index + 1).padStart(2, '0');
    }

    const nameParts = file.name.split('.');
    const extension = nameParts.pop();
    const baseName = nameParts.join('.');

    return `${number}_${baseName}.${extension}`;
  };

  const moveFileUp = id => {
    setMovingFileId(id);
    setTimeout(() => setMovingFileId(null), 300);

    setFiles(prev => {
      const index = prev.findIndex(f => f.id === id);
      if (index > 0) {
        const newFiles = [...prev];
        [newFiles[index - 1], newFiles[index]] = [newFiles[index], newFiles[index - 1]];
        return newFiles;
      }
      return prev;
    });
  };

  const moveFileDown = id => {
    setMovingFileId(id);
    setTimeout(() => setMovingFileId(null), 300);

    setFiles(prev => {
      const index = prev.findIndex(f => f.id === id);
      if (index < prev.length - 1) {
        const newFiles = [...prev];
        [newFiles[index], newFiles[index + 1]] = [newFiles[index + 1], newFiles[index]];
        return newFiles;
      }
      return prev;
    });
  };

  const removeFile = id => {
    setFiles(prev => prev.filter(f => f.id !== id));
  };

  const clearAllFiles = () => {
    setFiles([]);
    setError('');
    setDirectoryHandle(null);
  };

  const saveFiles = async () => {
    if (!selectedDirectory && !directoryHandle) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    if (files.length === 0) {
      setError('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    setLoading(true);
    setError('');

    try {
      if (directoryHandle && 'showDirectoryPicker' in window) {
        let successCount = 0;
        let failCount = 0;
        const errors = [];

        for (let index = 0; index < files.length; index++) {
          const file = files[index];
          const newFileName = getFileName(file, index);

          try {
            // Create a new file in the selected directory
            const fileHandle = await directoryHandle.getFileHandle(newFileName, { create: true });
            const writable = await fileHandle.createWritable();

            // Write the file content
            await writable.write(file.file);
            await writable.close();

            successCount++;
          } catch (fileError) {
            console.error(`Error saving ${newFileName}:`, fileError);
            failCount++;
            errors.push(`${newFileName}: ${fileError.message}`);
          }
        }

        if (failCount > 0) {
          setError(
            `–ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, ${failCount} –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—à–∏–±–∫–∏: ${errors.join(
              ', ',
            )}`,
          );
        } else {
          alert(`–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successCount} —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É!`);
          clearAllFiles();
          setSelectedDirectory('');
          setDirectoryHandle(null);
        }
      } else {
        setError(
          '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome –∏–ª–∏ Edge –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.',
        );
      }
    } catch (error) {
      console.error('Save error:', error);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const formatFileSize = bytes => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  };

  return (
    <div className="app">
      <div className="container">
        <h1>–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤</h1>
        <p className="subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤—å—Ç–µ –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏</p>

        {error && (
          <div className="error-message">
            <span>‚ö†Ô∏è {error}</span>
            <button onClick={() => setError('')}>√ó</button>
          </div>
        )}

        <div className="controls">
          <h2>üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏</h2>
          <div className="button-group">
            <button className="btn btn-primary" onClick={() => fileInputRef.current?.click()}>
              + –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã
            </button>
            <button
              className={`btn ${numbering ? 'btn-success' : 'btn-secondary'}`}
              onClick={toggleNumbering}
            >
              # {numbering ? '–£–±—Ä–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é' : '–î–æ–±–∞–≤–∏—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é'}
            </button>
            <button
              className="btn btn-danger"
              onClick={clearAllFiles}
              disabled={files.length === 0}
            >
              √ó –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
            </button>
          </div>

          {numbering && (
            <div className="numbering-options">
              <label>–§–æ—Ä–º–∞—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏:</label>
              <select value={numberingFormat} onChange={e => setNumberingFormat(e.target.value)}>
                <option value="01">01, 02, 03...</option>
                <option value="001">001, 002, 003...</option>
                <option value="1">1, 2, 3...</option>
                <option value="A">A, B, C...</option>
              </select>
            </div>
          )}

          <input
            ref={fileInputRef}
            type="file"
            multiple
            onChange={handleFileSelect}
            style={{ display: 'none' }}
          />
          <input
            ref={directoryInputRef}
            type="file"
            onChange={handleDirectorySelect}
            style={{ display: 'none' }}
          />
        </div>

        <div className="directory-selector">
          <h3>üíæ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</h3>
          <div className="directory-controls">
            <input
              type="text"
              className="directory-input"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: C:\Users\Username\Documents\MyFiles)"
              value={selectedDirectory}
              onChange={handleDirectoryChange}
              readOnly={directoryHandle !== null}
            />
            <button className="btn btn-secondary directory-btn" onClick={handleDirectoryPicker}>
              üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É
            </button>
            <div className="directory-hint">
              {'showDirectoryPicker' in window
                ? "–ù–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ë—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                : "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Ñ–∞–π–ª –∏–∑ –Ω—É–∂–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"}
            </div>
          </div>
        </div>

        <div className="file-list">
          <div className="file-list-header">
            <h3>üìã {files.length} —Ñ–∞–π–ª–æ–≤</h3>
            {files.length > 0 && (
              <button
                className="btn btn-success"
                onClick={saveFiles}
                disabled={(!selectedDirectory && !directoryHandle) || loading}
              >
                {loading ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            )}
          </div>

          {files.length === 0 ? (
            <div className="empty-state">
              <p>–ù–µ—Ç —Ñ–∞–π–ª–æ–≤</p>
              <p>–ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã" —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã —Å –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞</p>
              <button className="btn btn-primary" onClick={() => fileInputRef.current?.click()}>
                + –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã
              </button>
            </div>
          ) : (
            <div className="files">
              {files.map((file, index) => (
                <div
                  key={file.id}
                  className={`file-item ${movingFileId === file.id ? 'moving' : ''}`}
                >
                  <div className="file-info">
                    <div className="file-name">{getFileName(file, index)}</div>
                    <div className="file-details">
                      {formatFileSize(file.size)} ‚Ä¢ {file.type || file.extension || 'unknown'}
                    </div>
                  </div>
                  <div className="file-controls">
                    <button
                      className="btn-icon"
                      onClick={() => moveFileUp(file.id)}
                      disabled={index === 0}
                      title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
                    >
                      ‚Üë
                    </button>
                    <button
                      className="btn-icon"
                      onClick={() => moveFileDown(file.id)}
                      disabled={index === files.length - 1}
                      title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
                    >
                      ‚Üì
                    </button>
                    <button
                      className="btn-icon btn-danger"
                      onClick={() => removeFile(file.id)}
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      üóë
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;
